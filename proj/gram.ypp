%{
#include <iostream>
#include <string>
#include <map>
#include <cstdlib>
#include <vector>
#include "my.h"
using namespace std;

int yylex(); 
int yyerror(const char *p) { cerr << "Error!" << endl; return -1;}

%}

%union {
  string *name_;
  Atom_smal *a_s_;
  Arguments *args_;
  Func *func_;
  Arg_list *a_l_;
  Atom *atom_;
  vector<Atom *> *atoms_;
};

%token<name_> indificator
%token<name_> argname
%token ls
%token rs
%token ravno
%token point
%token comma
%token semicolon
%token question

%type<a_s_> atom_small
%type<args_> arguments
%type<func_> func body
%type<a_l_> args_list
%type<atom_> atom
%type<atoms_> atoms

%right comma
%right semicolon

%%

EVALUATE: atoms question func point {result(*$1, *$3);}; 

atoms: atom {$$ = new vector<Atom *> (1, $1);};
| atoms atom {$$ = $1; $$->push_back($2);};

atom_small: indificator arguments {$$ = new Atom_smal(*$1, $2);};

arguments:  {$$ = new Arguments();};
| arguments argname {swap($$, $1); $$->add_name(*$2);};
| arguments ls atom_small rs {swap($$, $1); $$->add_a_s(*$3);};
| arguments indificator {swap($$, $1); $$->add_name(*$2);};

atom: atom_small body point {$$ = new Atom($1, $2);};
| atom_small point {$$ = new Atom($1);};

args_list:
argname {$$ = new Arg_list(); $$->add_name(*$1);};	
| args_list indificator {swap($$, $1); $$->add_name(*$2);};
| ls func rs {$$ = new Arg_list(); $$->add_func($2);};
| args_list argname	{swap($$, $1); $$->add_name(*$2);};
| args_list	ls func rs {swap($$, $1); $$->add_func($3);};

func: indificator args_list {$$ = new Func($1, $2);};
| func comma func {swap($$, $1); $$->add_and_func($3);};
| func semicolon func {swap($$, $1); $$->add_or_func($3);};

body: ravno func {swap($$, $2);};
%%

int main(int argc, char* argv[]) {
  yyparse();
  return 0;
}
